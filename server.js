// server.js
import express from "express";
import axios from "axios";
import crypto from "crypto";
import dotenv from "dotenv";
import path from "path";
import { fileURLToPath } from "url";

// ===== PH·∫¶N M·ªöI: IMPORT MODULE DATABASE =====
import db from './database.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

dotenv.config();

const app = express();
app.use(express.json({ verify: (req, res, buf) => { req.rawBody = buf; } }));
app.use(express.static(path.join(__dirname, 'public')));

const { ZALO_APP_ID, ZALO_APP_SECRET, ZALO_REDIRECT_URI, PORT = 3000 } = process.env;

if (!ZALO_APP_ID || !ZALO_APP_SECRET || !ZALO_REDIRECT_URI) {
  console.error("Vui l√≤ng cung c·∫•p ƒë·ªß c√°c bi·∫øn m√¥i tr∆∞·ªùng trong file .env");
  process.exit(1);
}

// 1. Route ƒë·ªÉ b·∫Øt ƒë·∫ßu qu√° tr√¨nh k·∫øt n·ªëi (Kh√¥ng thay ƒë·ªïi)
app.get("/connect/zalo", (req, res) => {
  const state = crypto.randomBytes(16).toString("hex");
  const u = new URL("https://oauth.zaloapp.com/v4/oa/permission");
  u.searchParams.set("app_id", ZALO_APP_ID);
  u.searchParams.set("redirect_uri", ZALO_REDIRECT_URI);
  u.searchParams.set("state", state);
  res.redirect(u.toString());
});

// 2. Route x·ª≠ l√Ω callback t·ª´ Zalo - ===== N√ÇNG C·∫§P L·ªöN ·ªû ƒê√ÇY =====
app.get("/oauth/zalo/callback", async (req, res) => {
  const { code, state, oa_id } = req.query;

  if (!code) {
    return res.status(400).send("Kh√¥ng t√¨m th·∫•y m√£ `code` trong callback.");
  }

  try {
    const form = new URLSearchParams({
      grant_type: "authorization_code",
      app_id: ZALO_APP_ID,
      code: String(code),
    });

    const response = await axios.post(
      "https://oauth.zaloapp.com/v4/oa/access_token",
      form.toString(),
      { headers: {
          "content-type": "application/x-www-form-urlencoded",
          "secret_key": ZALO_APP_SECRET
      }}
    );

    const { access_token, refresh_token, expires_in } = response.data;
    
    // ===== PH·∫¶N M·ªöI: L∆ØU TOKEN V√ÄO DATABASE =====
    console.log(`üíæ B·∫Øt ƒë·∫ßu l∆∞u th√¥ng tin cho OA ID: ${oa_id}`);
    
    // T√≠nh to√°n th·ªùi gian h·∫øt h·∫°n
    const expiresAt = new Date(Date.now() + (expires_in - 300) * 1000); // Tr·ª´ 5 ph√∫t ƒë·ªÉ refresh s·ªõm

    // L·ªánh SQL UPSERT: N·∫øu oa_id ƒë√£ t·ªìn t·∫°i th√¨ UPDATE, ch∆∞a c√≥ th√¨ INSERT
    const upsertOaQuery = `
      INSERT INTO zalo_oas (oa_id, status)
      VALUES ($1, 'verified')
      ON CONFLICT (oa_id) DO NOTHING;
    `;
    
    const upsertTokenQuery = `
      INSERT INTO zalo_tokens (oa_id, access_token, refresh_token, expires_at)
      VALUES ($1, $2, $3, $4)
      ON CONFLICT (oa_id) DO UPDATE SET
        access_token = EXCLUDED.access_token,
        refresh_token = EXCLUDED.refresh_token,
        expires_at = EXCLUDED.expires_at;
    `;

    // Th·ª±c thi c√°c c√¢u l·ªánh SQL
    await db.query(upsertOaQuery, [oa_id]);
    await db.query(upsertTokenQuery, [oa_id, access_token, refresh_token, expiresAt]);

    console.log(`‚úÖ L∆∞u th√¥ng tin th√†nh c√¥ng cho OA ID: ${oa_id}`);
    // ===============================================

    res.send("<h1>K·∫øt n·ªëi Zalo OA th√†nh c√¥ng!</h1><p>D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o h·ªá th·ªëng. B·∫°n c√≥ th·ªÉ ƒë√≥ng c·ª≠a s·ªï n√†y.</p>");
  
  } catch (error) {
    console.error("L·ªói khi l·∫•y v√† l∆∞u token:", error.response?.data || error.message);
    res.status(500).send("ƒê√£ c√≥ l·ªói x·∫£y ra ph√≠a m√°y ch·ªß khi x·ª≠ l√Ω token.");
  }
});

// 3. Route x·ª≠ l√Ω Webhook t·ª´ Zalo - ===== N√ÇNG C·∫§P L·ªöN ·ªû ƒê√ÇY =====
app.post("/zalo/webhook", async (req, res) => {
  // Tr·∫£ v·ªÅ 200 OK ngay l·∫≠p t·ª©c ƒë·ªÉ kh√¥ng b·ªã Zalo retry
  res.status(200).send("OK");
  
  // ===== PH·∫¶N M·ªöI: L∆ØU S·ª∞ KI·ªÜN WEBHOOK V√ÄO DATABASE (x·ª≠ l√Ω b·∫•t ƒë·ªìng b·ªô) =====
  try {
    const event = req.body;
    const { event_name, oa_id } = event;

    console.log(` webhook event: ${event_name}`);

    const insertEventQuery = `
      INSERT INTO webhook_events (oa_id, event_type, payload)
      VALUES ($1, $2, $3);
    `;

    await db.query(insertEventQuery, [oa_id, event_name, event]);
    
  } catch (error) {
    // Ghi l·∫°i l·ªói nh∆∞ng kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn response tr·∫£ v·ªÅ cho Zalo
    console.error("L·ªói khi l∆∞u s·ª± ki·ªán webhook:", error);
  }
  // =========================================================================
});

// Kh·ªüi ƒë·ªông server
app.listen(PORT, () => {
  console.log(`Server ƒëang ch·∫°y t·∫°i http://localhost:${PORT}`);
});