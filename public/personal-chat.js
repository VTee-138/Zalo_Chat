// personal-chat.js
const socket = io(); // K·∫øt n·ªëi ƒë·∫øn server
const pathParts = window.location.pathname.split('/');
const USER_ID = pathParts[pathParts.length - 1]; // L·∫•y User ID t·ª´ URL

const chatMessages = document.getElementById('chat-messages');
const chatForm = document.querySelector('.chat-form');
const messageInput = document.getElementById('message-input');
const sendBtn = document.getElementById('send-btn');
const chatHeader = document.getElementById('chat-header');
const conversationsList = document.getElementById('conversations-list');
const customerInfo = document.getElementById('customer-info');
const currentUserInfo = document.getElementById('current-user-info');

let currentUserId = USER_ID; // ID c·ªßa user personal account hi·ªán t·∫°i
let selectedConversationId = null; // ID c·ªßa conversation ƒë∆∞·ª£c ch·ªçn
let selectedConversation = null;
let userInfo = null;

// Kh·ªüi t·∫°o trang
document.addEventListener('DOMContentLoaded', async () => {
    await loadCurrentUserInfo();
    await loadConversations();
    
    // Join room c·ªßa user hi·ªán t·∫°i
    socket.emit('join_personal_room', currentUserId);
});

// Load th√¥ng tin user hi·ªán t·∫°i
async function loadCurrentUserInfo() {
    try {
        // L·∫•y th√¥ng tin t·ª´ session ho·∫∑c API
        const response = await fetch(`/api/personal-profile/${currentUserId}`);
        const data = await response.json();
        
        if (data.error) {
            throw new Error(data.error);
        }
        
        userInfo = data;
        currentUserInfo.innerHTML = `
            <div class="user-profile">
                <img src="${data.avatar}" alt="${data.name}" class="user-avatar">
                <div class="user-details">
                    <h4>${data.name}</h4>
                    <p>ID: ${currentUserId}</p>
                </div>
            </div>
        `;
    } catch (error) {
        console.error('L·ªói khi t·∫£i th√¥ng tin user:', error);
        currentUserInfo.innerHTML = `
            <div class="error-info">
                <p>‚ùå Kh√¥ng th·ªÉ t·∫£i th√¥ng tin user</p>
            </div>
        `;
    }
}

// T·∫£i danh s√°ch conversations (t·ª´ personal chat API - c·∫ßn implement)
async function loadConversations() {
    try {
        conversationsList.innerHTML = `
            <div class="loading-conversations">
                <div class="spinner"></div>
                <p>ƒêang t·∫£i cu·ªôc h·ªôi tho·∫°i...</p>
            </div>
        `;

        // TODO: Implement API ƒë·ªÉ l·∫•y danh s√°ch conversations t·ª´ personal account
        // const response = await fetch(`/api/personal-conversations/${currentUserId}`);
        // const conversations = await response.json();
        
        // T·∫°m th·ªùi hi·ªÉn th·ªã th√¥ng b√°o
        conversationsList.innerHTML = `
            <div class="no-conversations">
                <div class="no-conv-icon">üí¨</div>
                <h4>Ch·ª©c nƒÉng ƒëang ph√°t tri·ªÉn</h4>
                <p>API l·∫•y danh s√°ch cu·ªôc h·ªôi tho·∫°i t·ª´ t√†i kho·∫£n c√° nh√¢n ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn</p>
                <div class="temp-info">
                    <p><strong>L∆∞u √Ω:</strong> Hi·ªán t·∫°i ch·ªâ h·ªó tr·ª£ g·ª≠i tin nh·∫Øn th·ª≠ nghi·ªám</p>
                </div>
            </div>
        `;
        
    } catch (error) {
        console.error('L·ªói khi t·∫£i conversations:', error);
        conversationsList.innerHTML = `
            <div class="error-conversations">
                <p>‚ùå L·ªói khi t·∫£i cu·ªôc h·ªôi tho·∫°i</p>
                <button onclick="loadConversations()">Th·ª≠ l·∫°i</button>
            </div>
        `;
    }
}

// Ch·ªçn m·ªôt cu·ªôc h·ªôi tho·∫°i (t·∫°m th·ªùi disable)
function selectConversation(conversation) {
    // TODO: Implement khi c√≥ API conversations
    console.log('Selected conversation:', conversation);
}

// X·ª≠ l√Ω form g·ª≠i tin nh·∫Øn
chatForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const text = messageInput.value.trim();
    if (!text) return;

    // T·∫°m th·ªùi hi·ªÉn th·ªã th√¥ng b√°o
    showNotification('Ch·ª©c nƒÉng g·ª≠i tin nh·∫Øn t·ª´ t√†i kho·∫£n c√° nh√¢n ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn', 'info');
    
    // TODO: Implement API g·ª≠i tin nh·∫Øn t·ª´ personal account
    /*
    try {
        const response = await fetch('/api/send-personal-message', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                user_id: currentUserId,
                recipient_id: selectedConversationId,
                text: text
            })
        });
        
        const result = await response.json();
        
        if (result.success) {
            displayMessage({
                sender: 'me',
                text: text,
                timestamp: new Date()
            });
            
            messageInput.value = '';
        } else {
            throw new Error(result.message);
        }
    } catch (error) {
        console.error('L·ªói khi g·ª≠i tin nh·∫Øn:', error);
        showNotification('L·ªói khi g·ª≠i tin nh·∫Øn: ' + error.message, 'error');
    }
    */
});

// Hi·ªÉn th·ªã tin nh·∫Øn
function displayMessage(message) {
    const div = document.createElement('div');
    div.classList.add('message');
    
    if (message.sender === 'me') {
        div.classList.add('sent');
    }
    
    div.innerHTML = `
        <div class="message-content">
            <p>${message.text}</p>
            <small>${new Date(message.timestamp).toLocaleTimeString('vi-VN')}</small>
        </div>
    `;
    
    chatMessages.appendChild(div);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

// Hi·ªÉn th·ªã notification
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.innerHTML = `
        <span>${message}</span>
        <button onclick="this.parentNode.remove()">√ó</button>
    `;
    
    // Th√™m v√†o container ho·∫∑c body
    const container = document.getElementById('notification-container') || document.body;
    container.appendChild(notification);
    
    // T·ª± ƒë·ªông ·∫©n sau 5 gi√¢y
    setTimeout(() => {
        if (notification.parentNode) {
            notification.remove();
        }
    }, 5000);
}

// L·∫Øng nghe events t·ª´ server (personal account)
socket.on('personal_message', (data) => {
    console.log('Nh·∫≠n tin nh·∫Øn personal:', data);
    // TODO: X·ª≠ l√Ω tin nh·∫Øn realtime t·ª´ personal account
});

// Cleanup khi r·ªùi trang
window.addEventListener('beforeunload', () => {
    socket.emit('leave_personal_room', currentUserId);
});

// Update chat header khi c√≥ th√¥ng tin user
function updateChatHeader() {
    if (userInfo) {
        chatHeader.innerHTML = `
            <div class="chat-placeholder">
                <div class="placeholder-icon">üí¨</div>
                <h3>Ch√†o ${userInfo.name}!</h3>
                <p>Giao di·ªán chat cho t√†i kho·∫£n c√° nh√¢n ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn</p>
                <div class="development-note">
                    <h4>üöß ƒêang ph√°t tri·ªÉn:</h4>
                    <ul>
                        <li>‚úÖ X√°c th·ª±c t√†i kho·∫£n c√° nh√¢n</li>
                        <li>üîÑ API l·∫•y danh s√°ch cu·ªôc h·ªôi tho·∫°i</li>
                        <li>üîÑ G·ª≠i/nh·∫≠n tin nh·∫Øn realtime</li>
                        <li>üîÑ Hi·ªÉn th·ªã l·ªãch s·ª≠ chat</li>
                    </ul>
                </div>
            </div>
        `;
    }
}

// G·ªçi update header sau khi load user info
setTimeout(updateChatHeader, 1000);
