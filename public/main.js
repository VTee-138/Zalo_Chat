// public/main.js
const socket = io(); // K·∫øt n·ªëi ƒë·∫øn server
const pathParts = window.location.pathname.split('/');
const OA_ID = pathParts[pathParts.length - 1]; // L·∫•y OA ID t·ª´ URL

const chatMessages = document.getElementById('chat-messages');
const chatForm = document.getElementById('chat-form');
const messageInput = document.getElementById('message-input');
const chatHeader = document.getElementById('chat-header');
const conversationList = document.querySelector('.conversations');
const customerInfo = document.getElementById('customer-info');

let current_oa_id = OA_ID; // L·∫•y t·ª´ URL
let current_user_id = null; // S·∫Ω ƒë∆∞·ª£c set khi ch·ªçn conversation
let selectedConversation = null;

// Kh·ªüi t·∫°o trang
document.addEventListener('DOMContentLoaded', async () => {
    chatHeader.innerHTML = `<h3>Chat v·ªõi OA: ${current_oa_id}</h3><p>Ch·ªçn m·ªôt cu·ªôc h·ªôi tho·∫°i t·ª´ danh s√°ch b√™n tr√°i</p>`;
    
    // Join room c·ªßa OA hi·ªán t·∫°i
    socket.emit('join_oa_room', current_oa_id);
    
    await loadConversations();
});

// T·∫£i danh s√°ch h·ªôi tho·∫°i
async function loadConversations() {
    try {
        const response = await fetch(`/api/conversations/${current_oa_id}`);
        const conversations = await response.json();
        
        conversationList.innerHTML = '';
        
        if (conversations.length === 0) {
            conversationList.innerHTML = '<p style="padding: 15px; color: #888; text-align: center;">Ch∆∞a c√≥ h·ªôi tho·∫°i n√†o</p>';
            return;
        }
        
        conversations.forEach(conv => {
            const conversationDiv = document.createElement('div');
            conversationDiv.className = 'conversation-item';
            conversationDiv.dataset.userId = conv.user_id;
            conversationDiv.innerHTML = `
                <div class="conversation-avatar">üë§</div>
                <div class="conversation-content">
                    <h4>${conv.display_name || 'Ng∆∞·ªùi d√πng ' + conv.user_id.substr(-4)}</h4>
                    <p class="last-message">${conv.last_message || 'Ch∆∞a c√≥ tin nh·∫Øn'}</p>
                    <small>${new Date(conv.received_at).toLocaleString('vi-VN')}</small>
                </div>
            `;
            
            conversationDiv.addEventListener('click', () => selectConversation(conv));
            conversationList.appendChild(conversationDiv);
        });
    } catch (error) {
        console.error('L·ªói khi t·∫£i danh s√°ch h·ªôi tho·∫°i:', error);
        conversationList.innerHTML = '<p style="padding: 15px; color: #red;">L·ªói khi t·∫£i danh s√°ch</p>';
    }
}

// Ch·ªçn m·ªôt cu·ªôc h·ªôi tho·∫°i
async function selectConversation(conversation) {
    // Highlight conversation ƒë∆∞·ª£c ch·ªçn
    document.querySelectorAll('.conversation-item').forEach(item => {
        item.classList.remove('active');
    });
    
    const selectedElement = document.querySelector(`[data-user-id="${conversation.user_id}"]`);
    if (selectedElement) {
        selectedElement.classList.add('active');
    }
    
    current_user_id = conversation.user_id;
    selectedConversation = conversation;
    
    // C·∫≠p nh·∫≠t header
    chatHeader.innerHTML = `
        <div class="chat-header-content">
            <div class="user-avatar">üë§</div>
            <div class="user-info">
                <h3>${conversation.display_name || 'Ng∆∞·ªùi d√πng ' + conversation.user_id.substr(-4)}</h3>
                <p>ID: ${conversation.user_id}</p>
            </div>
        </div>
    `;
    
    // C·∫≠p nh·∫≠t th√¥ng tin kh√°ch h√†ng
    customerInfo.innerHTML = `
        <h4>Th√¥ng tin kh√°ch h√†ng</h4>
        <p><strong>T√™n:</strong> ${conversation.display_name || 'Ch∆∞a c√≥ t√™n'}</p>
        <p><strong>User ID:</strong> ${conversation.user_id}</p>
        <p><strong>Tin nh·∫Øn cu·ªëi:</strong> ${new Date(conversation.received_at).toLocaleString('vi-VN')}</p>
    `;
    
    // Hi·ªán form chat
    chatForm.style.display = 'flex';
    
    // T·∫£i l·ªãch s·ª≠ tin nh·∫Øn
    await loadMessageHistory();
}

// T·∫£i l·ªãch s·ª≠ tin nh·∫Øn c·ªßa m·ªôt ng∆∞·ªùi d√πng
async function loadMessageHistory() {
    if (!current_user_id) return;
    
    try {
        const response = await fetch(`/api/messages/${current_oa_id}/${current_user_id}`);
        const messages = await response.json();
        
        chatMessages.innerHTML = '';
        
        messages.forEach(msgEvent => {
            displayMessageFromEvent(msgEvent);
        });
        
        // Cu·ªôn xu·ªëng cu·ªëi
        chatMessages.scrollTop = chatMessages.scrollHeight;
    } catch (error) {
        console.error('L·ªói khi t·∫£i l·ªãch s·ª≠ tin nh·∫Øn:', error);
    }
}

// Hi·ªÉn th·ªã tin nh·∫Øn t·ª´ event database
function displayMessageFromEvent(eventData) {
    const { event_type, payload, received_at } = eventData;
    
    const div = document.createElement('div');
    div.classList.add('message');
    
    let content = '';
    let isFromUser = false;
    
    // X√°c ƒë·ªãnh lo·∫°i tin nh·∫Øn v√† hi·ªÉn th·ªã
    if (event_type.startsWith('user_send')) {
        isFromUser = true;
        content = formatMessageContent(event_type, payload);
    } else if (event_type.startsWith('oa_send')) {
        isFromUser = false;
        content = formatMessageContent(event_type, payload);
    } else {
        return; // B·ªè qua c√°c event kh√°c
    }
    
    if (!isFromUser) {
        div.classList.add('sent');
    }
    
    div.innerHTML = `
        <div class="message-content">
            ${content}
            <small>${new Date(received_at).toLocaleTimeString('vi-VN')}</small>
        </div>
    `;
    
    chatMessages.appendChild(div);
}

// Format n·ªôi dung tin nh·∫Øn theo lo·∫°i
function formatMessageContent(eventType, payload) {
    const message = payload.message;
    
    switch (eventType) {
        case 'user_send_text':
        case 'oa_send_text':
            return `<p>${message?.text || '[Tin nh·∫Øn text]'}</p>`;
            
        case 'user_send_image':
        case 'oa_send_image':
            const imageUrl = message?.attachments?.[0]?.payload?.url;
            return `
                <div class="message-image">
                    <p>üì∑ H√¨nh ·∫£nh</p>
                    ${imageUrl ? `<img src="${imageUrl}" alt="Image" style="max-width: 200px; border-radius: 8px;" onclick="window.open('${imageUrl}', '_blank')">` : ''}
                </div>
            `;
            
        case 'user_send_audio':
        case 'oa_send_audio':
            const audioUrl = message?.attachments?.[0]?.payload?.url;
            return `
                <div class="message-audio">
                    <p>üéµ Tin nh·∫Øn voice</p>
                    ${audioUrl ? `<audio controls><source src="${audioUrl}" type="audio/mpeg"></audio>` : ''}
                </div>
            `;
            
        case 'user_send_sticker':
        case 'oa_send_sticker':
            const stickerUrl = message?.attachments?.[0]?.payload?.url;
            return `
                <div class="message-sticker">
                    <p>üòÑ Sticker</p>
                    ${stickerUrl ? `<img src="${stickerUrl}" alt="Sticker" style="max-width: 100px;">` : ''}
                </div>
            `;
            
        case 'user_send_gif':
        case 'oa_send_gif':
            const gifUrl = message?.attachments?.[0]?.payload?.url;
            return `
                <div class="message-gif">
                    <p>üé¨ GIF</p>
                    ${gifUrl ? `<img src="${gifUrl}" alt="GIF" style="max-width: 200px; border-radius: 8px;">` : ''}
                </div>
            `;
            
        case 'user_send_link':
        case 'oa_send_link':
            const linkUrl = message?.attachments?.[0]?.payload?.url;
            const linkTitle = message?.attachments?.[0]?.payload?.title;
            return `
                <div class="message-link">
                    <p>üîó Link</p>
                    ${linkUrl ? `<a href="${linkUrl}" target="_blank" rel="noopener">${linkTitle || linkUrl}</a>` : ''}
                </div>
            `;
            
        case 'user_send_location':
        case 'oa_send_location':
            const location = message?.attachments?.[0]?.payload;
            return `
                <div class="message-location">
                    <p>üìç V·ªã tr√≠</p>
                    ${location ? `<p>T·ªça ƒë·ªô: ${location.coordinates?.lat}, ${location.coordinates?.long}</p>` : ''}
                </div>
            `;
            
        case 'follow':
            return `<p class="system-message">üéâ ƒê√£ theo d√µi OA</p>`;
            
        case 'unfollow':
            return `<p class="system-message">üëã ƒê√£ b·ªè theo d√µi OA</p>`;
            
        default:
            return `<p>[${eventType}]</p>`;
    }
}

// Hi·ªÉn th·ªã tin nh·∫Øn realtime t·ª´ webhook
function displayMessage(event) {
    const div = document.createElement('div');
    div.classList.add('message');

    let content = '';
    let isFromUser = false;
    
    // Ph√¢n t√≠ch s·ª± ki·ªán t·ª´ Zalo
    if (event.event_name.startsWith('user_send')) {
        isFromUser = true;
        content = formatMessageContent(event.event_name, event);
    } else if (event.event_name.startsWith('oa_send')) {
        isFromUser = false;
        content = formatMessageContent(event.event_name, event);
    } else if (event.event_name === 'follow' || event.event_name === 'unfollow') {
        content = formatMessageContent(event.event_name, event);
        isFromUser = false;
    } else {
        return; // B·ªè qua c√°c s·ª± ki·ªán kh√¥ng ph·∫£i tin nh·∫Øn
    }

    if (!isFromUser) {
        div.classList.add('sent');
    }

    div.innerHTML = `
        <div class="message-content">
            ${content}
            <small>${new Date().toLocaleTimeString('vi-VN')}</small>
        </div>
    `;
    
    chatMessages.appendChild(div);
    chatMessages.scrollTop = chatMessages.scrollHeight; // T·ª± cu·ªôn xu·ªëng
}

// L·∫Øng nghe s·ª± ki·ªán 'zalo_event' t·ª´ server
socket.on('zalo_event', (event) => {
    console.log('Nh·∫≠n ƒë∆∞·ª£c s·ª± ki·ªán t·ª´ Zalo:', event);
    
    // Ch·ªâ x·ª≠ l√Ω event c·ªßa OA hi·ªán t·∫°i
    if (event.oa_id === current_oa_id) {
        const senderName = event.sender?.display_name || 
                          event.sender?.displayName || 
                          'Ng∆∞·ªùi d√πng ' + (event.sender?.id ? event.sender.id.substr(-4) : 'Unknown');
        
        // N·∫øu ƒëang chat v·ªõi user n√†y, hi·ªÉn th·ªã tin nh·∫Øn ngay
        if (current_user_id && event.sender && event.sender.id === current_user_id) {
            displayMessage(event);
        } 
        // N·∫øu kh√¥ng ph·∫£i user ƒëang chat, hi·ªÉn th·ªã notification
        else if (event.event_name.startsWith('user_send') || event.event_name === 'follow') {
            const messagePreview = getMessagePreview(event.event_name, event);
            showNewMessageNotification(senderName, messagePreview);
        }
        
        // C·∫≠p nh·∫≠t l·∫°i danh s√°ch conversation n·∫øu c√≥ tin nh·∫Øn m·ªõi t·ª´ user kh√°c
        if (event.event_name === 'user_send_text' || event.event_name === 'follow') {
            setTimeout(() => loadConversations(), 1000); // Delay 1s ƒë·ªÉ DB c·∫≠p nh·∫≠t
        }
    }
});

// X·ª≠ l√Ω khi form g·ª≠i tin nh·∫Øn ƒë∆∞·ª£c submit
chatForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    if (!current_user_id) {
        alert('Vui l√≤ng ch·ªçn m·ªôt cu·ªôc h·ªôi tho·∫°i tr∆∞·ªõc khi g·ª≠i tin nh·∫Øn!');
        return;
    }
    
    const text = messageInput.value.trim();
    if (!text) return;

    try {
        // G·ª≠i tin nh·∫Øn ƒë·∫øn server qua API
        const response = await fetch('/api/send-message', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                oa_id: current_oa_id,
                user_id: current_user_id,
                text: text
            })
        });
        
        const result = await response.json();
        
        if (result.success) {
            // Hi·ªÉn th·ªã tin nh·∫Øn v·ª´a g·ª≠i l√™n giao di·ªán ngay l·∫≠p t·ª©c
            const sentEvent = {
                event_name: 'oa_send_text',
                message: { text: text }
            };
            displayMessage(sentEvent);
            
            messageInput.value = '';
            messageInput.focus();
        } else {
            alert('L·ªói khi g·ª≠i tin nh·∫Øn: ' + result.message);
        }
    } catch (error) {
        console.error('L·ªói khi g·ª≠i tin nh·∫Øn:', error);
        alert('C√≥ l·ªói x·∫£y ra khi g·ª≠i tin nh·∫Øn');
    }
});

// Hi·ªÉn th·ªã notification tin nh·∫Øn m·ªõi
function showNewMessageNotification(senderName, messagePreview) {
    // T·∫°o notification element
    const notification = document.createElement('div');
    notification.className = 'new-message-notification';
    notification.innerHTML = `
        <strong>üí¨ Tin nh·∫Øn m·ªõi t·ª´ ${senderName}</strong>
        <p style="margin: 5px 0 0 0; font-size: 14px; opacity: 0.9;">${messagePreview}</p>
    `;
    
    // Th√™m v√†o body
    document.body.appendChild(notification);
    
    // T·ª± ƒë·ªông ·∫©n sau 5 gi√¢y
    setTimeout(() => {
        notification.style.animation = 'slideInRight 0.3s ease reverse';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 5000);
    
    // Click ƒë·ªÉ ·∫©n
    notification.addEventListener('click', () => {
        notification.style.animation = 'slideInRight 0.3s ease reverse';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    });
}

// L·∫•y preview text t·ª´ message content
function getMessagePreview(eventType, payload) {
    switch (eventType) {
        case 'user_send_text':
            return payload.message?.text?.substring(0, 50) + (payload.message?.text?.length > 50 ? '...' : '') || 'Tin nh·∫Øn vƒÉn b·∫£n';
        case 'user_send_image':
            return 'üì∑ ƒê√£ g·ª≠i h√¨nh ·∫£nh';
        case 'user_send_audio':
            return 'üéµ ƒê√£ g·ª≠i voice message';
        case 'user_send_sticker':
            return 'üòÑ ƒê√£ g·ª≠i sticker';
        case 'user_send_gif':
            return 'üé¨ ƒê√£ g·ª≠i GIF';
        case 'user_send_link':
            return 'üîó ƒê√£ g·ª≠i link';
        case 'user_send_location':
            return 'üìç ƒê√£ chia s·∫ª v·ªã tr√≠';
        case 'follow':
            return 'üéâ ƒê√£ theo d√µi OA';
        default:
            return 'Tin nh·∫Øn m·ªõi';
    }
}

// Ng·∫Øt k·∫øt n·ªëi kh·ªèi room khi r·ªùi trang
window.addEventListener('beforeunload', () => {
    socket.emit('leave_oa_room', current_oa_id);
});