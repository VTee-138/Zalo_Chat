// Profile Page JavaScript
document.addEventListener('DOMContentLoaded', async () => {
    const profileCard = document.getElementById('profile-card');
    const userId = getUserIdFromUrl();

    if (!userId) {
        showError('Kh√¥ng t√¨m th·∫•y User ID');
        return;
    }

    await loadProfileData(userId);
});

function getUserIdFromUrl() {
    const pathParts = window.location.pathname.split('/');
    return pathParts[pathParts.length - 1];
}

async function loadProfileData(userId) {
    const profileCard = document.getElementById('profile-card');
    
    try {
        // L·∫•y th√¥ng tin t·ª´ session tr∆∞·ªõc
        const sessionResponse = await fetch('/api/get-connected-accounts');
        const accounts = await sessionResponse.json();
        
        const personalAccount = accounts.personal[userId];
        if (!personalAccount) {
            throw new Error('Kh√¥ng t√¨m th·∫•y th√¥ng tin t√†i kho·∫£n');
        }

        // Hi·ªÉn th·ªã th√¥ng tin c∆° b·∫£n t·ª´ session
        profileCard.innerHTML = `
            <div class="profile-info">
                <div class="profile-avatar">
                    <img src="${personalAccount.avatar}" alt="${personalAccount.name}" onload="this.style.opacity=1">
                </div>
                <div class="profile-details">
                    <h2>${personalAccount.name}</h2>
                    <p class="user-id">ID: ${userId}</p>
                    <span class="account-badge">Zalo Personal Account</span>
                </div>
            </div>
            <div class="profile-stats">
                <div class="stat-item">
                    <div class="stat-number">‚úÖ</div>
                    <div class="stat-label">ƒê√£ K·∫øt N·ªëi</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number" id="last-sync">üîÑ</div>
                    <div class="stat-label">ƒê·ªìng B·ªô G·∫ßn ƒê√¢y</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">üë§</div>
                    <div class="stat-label">C√° Nh√¢n</div>
                </div>
            </div>
        `;

        // C·∫≠p nh·∫≠t th·ªùi gian sync
        updateLastSyncTime();

    } catch (error) {
        console.error('L·ªói khi t·∫£i profile:', error);
        showError('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin profile: ' + error.message);
    }
}

function updateLastSyncTime() {
    const lastSyncElement = document.getElementById('last-sync');
    if (lastSyncElement) {
        const now = new Date();
        lastSyncElement.textContent = now.toLocaleTimeString('vi-VN', { 
            hour: '2-digit', 
            minute: '2-digit' 
        });
    }
}

function showError(message) {
    const profileCard = document.getElementById('profile-card');
    profileCard.innerHTML = `
        <div class="error-state">
            <div class="error-icon">‚ùå</div>
            <h3>C√≥ l·ªói x·∫£y ra</h3>
            <p>${message}</p>
            <button onclick="location.reload()" class="retry-btn">Th·ª≠ l·∫°i</button>
        </div>
    `;
}

// Action functions
async function viewFriends() {
    const btn = event.target.closest('.action-btn');
    const originalText = btn.innerHTML;
    
    btn.disabled = true;
    btn.innerHTML = '<div class="btn-spinner"></div> ƒêang t·∫£i...';
    
    try {
        // Simulate API call - replace with actual implementation
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        showNotification('T√≠nh nƒÉng xem danh s√°ch b·∫°n b√® ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn', 'info');
        
    } catch (error) {
        showNotification('L·ªói khi t·∫£i danh s√°ch b·∫°n b√®: ' + error.message, 'error');
    } finally {
        btn.disabled = false;
        btn.innerHTML = originalText;
    }
}

async function viewDetailedProfile() {
    const btn = event.target.closest('.action-btn');
    const originalText = btn.innerHTML;
    
    btn.disabled = true;
    btn.innerHTML = '<div class="btn-spinner"></div> ƒêang t·∫£i...';
    
    try {
        const userId = getUserIdFromUrl();
        
        // Call API to get detailed profile (if available)
        const response = await fetch(`/api/personal-profile/${userId}`);
        
        if (response.ok) {
            const profileData = await response.json();
            showProfileModal(profileData);
        } else {
            throw new Error('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin chi ti·∫øt');
        }
        
    } catch (error) {
        showNotification('T√≠nh nƒÉng xem chi ti·∫øt ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn', 'info');
    } finally {
        btn.disabled = false;
        btn.innerHTML = originalText;
    }
}

async function syncData() {
    const btn = event.target.closest('.action-btn');
    const originalText = btn.innerHTML;
    
    btn.disabled = true;
    btn.innerHTML = '<div class="btn-spinner"></div> ƒê·ªìng b·ªô...';
    
    try {
        // Simulate sync process
        await new Promise(resolve => setTimeout(resolve, 1500));
        
        updateLastSyncTime();
        showNotification('ƒê·ªìng b·ªô d·ªØ li·ªáu th√†nh c√¥ng!', 'success');
        
    } catch (error) {
        showNotification('L·ªói khi ƒë·ªìng b·ªô: ' + error.message, 'error');
    } finally {
        btn.disabled = false;
        btn.innerHTML = originalText;
    }
}

function openSettings() {
    showNotification('T√≠nh nƒÉng c√†i ƒë·∫∑t ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn', 'info');
}

function showProfileModal(data) {
    // Create and show modal with detailed profile data
    const modal = document.createElement('div');
    modal.className = 'profile-modal';
    modal.innerHTML = `
        <div class="modal-content">
            <div class="modal-header">
                <h3>Th√¥ng Tin Chi Ti·∫øt</h3>
                <button onclick="this.closest('.profile-modal').remove()">√ó</button>
            </div>
            <div class="modal-body">
                <pre>${JSON.stringify(data, null, 2)}</pre>
            </div>
        </div>
    `;
    document.body.appendChild(modal);
}

function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.innerHTML = `
        <span>${message}</span>
        <button onclick="this.parentNode.remove()">√ó</button>
    `;
    
    document.body.appendChild(notification);
    
    // Auto hide after 5 seconds
    setTimeout(() => {
        if (notification.parentNode) {
            notification.remove();
        }
    }, 5000);
}
