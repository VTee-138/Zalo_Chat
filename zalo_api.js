// zalo_api.js
import axios from 'axios';
import db from './database.js';

/**
 * L·∫•y access token h·ª£p l·ªá t·ª´ CSDL cho m·ªôt OA c·ª• th·ªÉ.
 * @param {string} oa_id - ID c·ªßa Official Account.
 * @returns {Promise<string|null>} Access token ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y/l·ªói.
 */
export async function getValidAccessToken(oa_id) {
  try {
    const query = 'SELECT access_token FROM zalo_tokens WHERE oa_id = $1 AND expires_at > NOW()';
    const result = await db.query(query, [oa_id]);
    if (result.rows.length > 0) {
      return result.rows[0].access_token;
    }
    console.error(`Kh√¥ng t√¨m th·∫•y access token h·ª£p l·ªá cho OA ID: ${oa_id}`);
    return null;
  } catch (error) {
    console.error('L·ªói khi l·∫•y access token t·ª´ DB:', error);
    return null;
  }
}

/**
 * Crawl t·∫•t c·∫£ tin nh·∫Øn t·ª´ Zalo OA API v√† l∆∞u v√†o database
 * @param {string} oa_id - ID c·ªßa Official Account.
 * @param {number} limit - S·ªë l∆∞·ª£ng tin nh·∫Øn t·ªëi ƒëa m·ªói l·∫ßn g·ªçi (m·∫∑c ƒë·ªãnh 20).
 * @returns {Promise<boolean>} True n·∫øu th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i.
 */
export async function crawlMessagesFromZalo(oa_id, limit = 20) {
  const accessToken = await getValidAccessToken(oa_id);
  if (!accessToken) {
    console.error(`Kh√¥ng th·ªÉ crawl tin nh·∫Øn v√¨ thi·∫øu access token cho OA ${oa_id}`);
    return false;
  }

  try {
    let offset = 0;
    let hasMore = true;
    let totalCrawled = 0;

    console.log(`üîÑ B·∫Øt ƒë·∫ßu crawl tin nh·∫Øn cho OA ${oa_id}...`);

    while (hasMore) {
      // G·ªçi API l·∫•y danh s√°ch cu·ªôc h·ªôi tho·∫°i
      const conversationsResponse = await axios.get(
        `https://openapi.zalo.me/v3.0/oa/conversation/list?data={"offset":${offset},"limit":${limit}}`,
        {
          headers: {
            'Authorization': `Bearer ${accessToken}`,
            'Content-Type': 'application/json',
          },
        }
      );

      if (conversationsResponse.data.error !== 0) {
        console.error(`L·ªói khi l·∫•y danh s√°ch h·ªôi tho·∫°i: ${conversationsResponse.data.message}`);
        break;
      }

      const conversations = conversationsResponse.data.data || [];
      console.log(`üìã T√¨m th·∫•y ${conversations.length} cu·ªôc h·ªôi tho·∫°i t·∫°i offset ${offset}`);

      if (conversations.length === 0) {
        hasMore = false;
        break;
      }

      // L·∫•y tin nh·∫Øn cho t·ª´ng cu·ªôc h·ªôi tho·∫°i
      for (const conversation of conversations) {
        const userId = conversation.user_id;
        console.log(`üí¨ ƒêang crawl tin nh·∫Øn cho user: ${userId}`);

        try {
          // L·∫•y tin nh·∫Øn c·ªßa cu·ªôc h·ªôi tho·∫°i n√†y
          const messagesResponse = await axios.get(
            `https://openapi.zalo.me/v3.0/oa/conversation/getmessage?data={"user_id":"${userId}","offset":0,"limit":50}`,
            {
              headers: {
                'Authorization': `Bearer ${accessToken}`,
                'Content-Type': 'application/json',
              },
            }
          );

          if (messagesResponse.data.error === 0) {
            const messages = messagesResponse.data.data || [];
            console.log(`üì® T√¨m th·∫•y ${messages.length} tin nh·∫Øn cho user ${userId}`);

            // L∆∞u t·ª´ng tin nh·∫Øn v√†o database
            for (const message of messages) {
              await saveMessageToDatabase(oa_id, message, userId);
              totalCrawled++;
            }
          } else {
            console.error(`L·ªói khi l·∫•y tin nh·∫Øn cho user ${userId}: ${messagesResponse.data.message}`);
          }

          // Delay gi·ªØa c√°c request ƒë·ªÉ tr√°nh rate limit
          await new Promise(resolve => setTimeout(resolve, 500));

        } catch (messageError) {
          console.error(`L·ªói khi x·ª≠ l√Ω tin nh·∫Øn cho user ${userId}:`, messageError.message);
        }
      }

      offset += limit;
      
      // Ki·ªÉm tra n·∫øu s·ªë l∆∞·ª£ng conversation tr·∫£ v·ªÅ √≠t h∆°n limit th√¨ ƒë√£ h·∫øt
      if (conversations.length < limit) {
        hasMore = false;
      }

      // Delay gi·ªØa c√°c page ƒë·ªÉ tr√°nh rate limit
      await new Promise(resolve => setTimeout(resolve, 1000));
    }

    console.log(`‚úÖ Ho√†n th√†nh crawl! T·ªïng c·ªông ${totalCrawled} tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o database.`);
    return true;

  } catch (error) {
    console.error('L·ªói nghi√™m tr·ªçng khi crawl tin nh·∫Øn:', error.response?.data || error.message);
    return false;
  }
}

/**
 * L∆∞u tin nh·∫Øn v√†o database d∆∞·ªõi d·∫°ng webhook event
 * @param {string} oa_id - ID c·ªßa OA
 * @param {object} message - Tin nh·∫Øn t·ª´ Zalo API
 * @param {string} userId - ID c·ªßa user
 */
async function saveMessageToDatabase(oa_id, message, userId) {
  try {
    // Chuy·ªÉn ƒë·ªïi message t·ª´ Zalo API th√†nh format webhook event
    const eventType = message.from_id === oa_id ? 'oa_send_text' : 'user_send_text';
    
    // T·∫°o fake event payload gi·ªëng webhook
    const fakeWebhookEvent = {
      app_id: oa_id,
      user_id_by_app: userId,
      oa_id: oa_id,
      event_name: eventType,
      message: {
        msg_id: message.msg_id,
        text: message.message || message.text,
        attachments: message.attachments || []
      },
      sender: {
        id: message.from_id === oa_id ? oa_id : userId,
        display_name: message.from_name || 'Unknown User'
      },
      recipient: {
        id: message.from_id === oa_id ? userId : oa_id
      },
      timestamp: message.time || Date.now()
    };

    // Ki·ªÉm tra xem tin nh·∫Øn ƒë√£ t·ªìn t·∫°i ch∆∞a (ƒë·ªÉ tr√°nh duplicate)
    const checkQuery = 'SELECT id FROM webhook_events WHERE payload->>\'message\'->>\'msg_id\' = $1';
    const existingMessage = await db.query(checkQuery, [message.msg_id]);

    if (existingMessage.rows.length === 0) {
      // L∆∞u v√†o database
      const insertQuery = 'INSERT INTO webhook_events (oa_id, event_type, payload, received_at) VALUES ($1, $2, $3, $4)';
      const receivedAt = new Date(message.time || Date.now());
      
      await db.query(insertQuery, [oa_id, eventType, fakeWebhookEvent, receivedAt]);
      console.log(`üíæ ƒê√£ l∆∞u tin nh·∫Øn ${message.msg_id} v√†o database`);
    } else {
      console.log(`‚è≠Ô∏è Tin nh·∫Øn ${message.msg_id} ƒë√£ t·ªìn t·∫°i, b·ªè qua`);
    }

  } catch (error) {
    console.error(`L·ªói khi l∆∞u tin nh·∫Øn ${message.msg_id}:`, error.message);
  }
}

/**
 * G·ª≠i tin nh·∫Øn vƒÉn b·∫£n ƒë·∫øn m·ªôt ng∆∞·ªùi d√πng c·ª• th·ªÉ.
 * @param {string} oa_id - ID c·ªßa OA g·ª≠i tin.
 * @param {string} user_id - ID c·ªßa ng∆∞·ªùi d√πng nh·∫≠n tin.
 * @param {string} text - N·ªôi dung tin nh·∫Øn.
 * @returns {Promise<boolean>} True n·∫øu th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i.
 */
export async function sendTextMessage(oa_id, user_id, text) {
  const accessToken = await getValidAccessToken(oa_id);
  if (!accessToken) {
    console.error(`Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn v√¨ thi·∫øu access token cho OA ${oa_id}`);
    return false;
  }

  try {
    const response = await axios.post(
      'https://openapi.zalo.me/v3.0/oa/message/cs',
      {
        recipient: { user_id: user_id },
        message: { text: text },
      },
      {
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Content-Type': 'application/json',
        },
      }
    );

    if (response.data.error === 0) {
      console.log(`‚úÖ G·ª≠i tin nh·∫Øn th√†nh c√¥ng ƒë·∫øn user ${user_id}`);
      return true;
    } else {
      console.error(`L·ªói khi g·ª≠i tin nh·∫Øn t·ª´ Zalo API: ${response.data.message}`);
      return false;
    }
  } catch (error) {
    console.error('L·ªói nghi√™m tr·ªçng khi g·ªçi API g·ª≠i tin nh·∫Øn:', error.response?.data || error.message);
    return false;
  }
}